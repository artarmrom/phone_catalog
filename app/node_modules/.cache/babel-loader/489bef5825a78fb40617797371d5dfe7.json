{"ast":null,"code":"const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues on CodeSandbox\n\n  image.src = url;\n});\n\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\n\nexport default async function getCroppedImg(imageSrc, pixelCrop) {\n  let rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * (maxSize / 2 * Math.sqrt(2)); // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n\n  canvas.width = safeArea;\n  canvas.height = safeArea; // translate canvas context to a central location on image to allow rotating around the center.\n\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2); // draw rotated image and store data.\n\n  ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n  const data = ctx.getImageData(0, 0, safeArea, safeArea); // set canvas width to final desired crop size - this will clear existing context\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height; // paste generated rotate image with correct offsets for x,y crop values.\n\n  ctx.putImageData(data, Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x), Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)); // As Base64 string\n  // return data;\n  // As a blob\n  // return new Promise(resolve => {\n  //   canvas.toBlob(file => {\n  //     resolve(URL.createObjectURL(file))\n  //   }, 'image/jpeg')\n  // })\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      if (!blob) {\n        //reject(new Error('Canvas is empty'));\n        console.error(\"Canvas is empty\");\n        return;\n      }\n\n      blob.name = 'prueba';\n      resolve(blob);\n    }, \"image/jpeg\");\n  });\n}","map":{"version":3,"sources":["/Users/aarmario/Documents/MyRepos/phone_catalog/app/src/Components/ImageCropper/CropperFunction.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","round","x","y","toBlob","blob","console","name"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,GAAG,IACrB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,gBAAN,CAAuB,MAAvB,EAA+B,MAAMJ,OAAO,CAACE,KAAD,CAA5C;AACAA,EAAAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,EAAgCC,KAAK,IAAIJ,MAAM,CAACI,KAAD,CAA/C;AACAH,EAAAA,KAAK,CAACI,YAAN,CAAmB,aAAnB,EAAkC,WAAlC,EAJ+B,CAIgB;;AAC/CJ,EAAAA,KAAK,CAACK,GAAN,GAAYT,GAAZ;AACD,CAND,CADF;;AASA,SAASU,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,SAAQA,WAAW,GAAGC,IAAI,CAACC,EAApB,GAA0B,GAAjC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,eAAeC,aAAf,CAA6BC,QAA7B,EAAuCC,SAAvC,EAAgE;AAAA,MAAdC,QAAc,uEAAH,CAAG;AAC7E,QAAMb,KAAK,GAAG,MAAML,WAAW,CAACgB,QAAD,CAA/B;AACA,QAAMG,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAMC,OAAO,GAAGX,IAAI,CAACY,GAAL,CAASpB,KAAK,CAACqB,KAAf,EAAsBrB,KAAK,CAACsB,MAA5B,CAAhB;AACA,QAAMC,QAAQ,GAAG,KAAMJ,OAAO,GAAG,CAAX,GAAgBX,IAAI,CAACgB,IAAL,CAAU,CAAV,CAArB,CAAjB,CAN6E,CAQ7E;AACA;;AACAV,EAAAA,MAAM,CAACO,KAAP,GAAeE,QAAf;AACAT,EAAAA,MAAM,CAACQ,MAAP,GAAgBC,QAAhB,CAX6E,CAa7E;;AACAN,EAAAA,GAAG,CAACQ,SAAJ,CAAcF,QAAQ,GAAG,CAAzB,EAA4BA,QAAQ,GAAG,CAAvC;AACAN,EAAAA,GAAG,CAACS,MAAJ,CAAWpB,cAAc,CAACO,QAAD,CAAzB;AACAI,EAAAA,GAAG,CAACQ,SAAJ,CAAc,CAACF,QAAD,GAAY,CAA1B,EAA6B,CAACA,QAAD,GAAY,CAAzC,EAhB6E,CAkB7E;;AACAN,EAAAA,GAAG,CAACU,SAAJ,CACE3B,KADF,EAEEuB,QAAQ,GAAG,CAAX,GAAevB,KAAK,CAACqB,KAAN,GAAc,GAF/B,EAGEE,QAAQ,GAAG,CAAX,GAAevB,KAAK,CAACsB,MAAN,GAAe,GAHhC;AAKA,QAAMM,IAAI,GAAGX,GAAG,CAACY,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBN,QAAvB,EAAiCA,QAAjC,CAAb,CAxB6E,CA0B7E;;AACAT,EAAAA,MAAM,CAACO,KAAP,GAAeT,SAAS,CAACS,KAAzB;AACAP,EAAAA,MAAM,CAACQ,MAAP,GAAgBV,SAAS,CAACU,MAA1B,CA5B6E,CA8B7E;;AACAL,EAAAA,GAAG,CAACa,YAAJ,CACEF,IADF,EAEEpB,IAAI,CAACuB,KAAL,CAAW,IAAIR,QAAQ,GAAG,CAAf,GAAmBvB,KAAK,CAACqB,KAAN,GAAc,GAAjC,GAAuCT,SAAS,CAACoB,CAA5D,CAFF,EAGExB,IAAI,CAACuB,KAAL,CAAW,IAAIR,QAAQ,GAAG,CAAf,GAAmBvB,KAAK,CAACsB,MAAN,GAAe,GAAlC,GAAwCV,SAAS,CAACqB,CAA7D,CAHF,EA/B6E,CAqC7E;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO,IAAIpC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCe,IAAAA,MAAM,CAACoB,MAAP,CAAcC,IAAI,IAAI;AACpB,UAAI,CAACA,IAAL,EAAW;AACT;AACAC,QAAAA,OAAO,CAACjC,KAAR,CAAc,iBAAd;AACA;AACD;;AACDgC,MAAAA,IAAI,CAACE,IAAL,GAAY,QAAZ;AACAvC,MAAAA,OAAO,CAACqC,IAAD,CAAP;AACD,KARD,EAQG,YARH;AASD,GAVM,CAAP;AAWD","sourcesContent":["const createImage = url =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', error => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  const maxSize = Math.max(image.width, image.height)\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea\n  canvas.height = safeArea\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2)\n  ctx.rotate(getRadianAngle(rotation))\n  ctx.translate(-safeArea / 2, -safeArea / 2)\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  )\n  const data = ctx.getImageData(0, 0, safeArea, safeArea)\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\n    Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\n  )\n\n  // As Base64 string\n  // return data;\n\n  // As a blob\n  // return new Promise(resolve => {\n  //   canvas.toBlob(file => {\n  //     resolve(URL.createObjectURL(file))\n  //   }, 'image/jpeg')\n  // })\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      if (!blob) {\n        //reject(new Error('Canvas is empty'));\n        console.error(\"Canvas is empty\");\n        return;\n      }\n      blob.name = 'prueba';\n      resolve(blob);\n    }, \"image/jpeg\");\n  });\n}\n\n"]},"metadata":{},"sourceType":"module"}